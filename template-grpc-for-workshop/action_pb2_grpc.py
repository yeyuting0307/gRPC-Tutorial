# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import action_pb2 as action__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class ToDoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UnaryAddItem = channel.unary_unary(
                '/AiiiGRPC.ToDoService/UnaryAddItem',
                request_serializer=action__pb2.Item.SerializeToString,
                response_deserializer=action__pb2.List.FromString,
                )
        self.ClientStreamingAddItem = channel.stream_unary(
                '/AiiiGRPC.ToDoService/ClientStreamingAddItem',
                request_serializer=action__pb2.Item.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ServerStreamingSubList = channel.unary_stream(
                '/AiiiGRPC.ToDoService/ServerStreamingSubList',
                request_serializer=action__pb2.Filter.SerializeToString,
                response_deserializer=action__pb2.Item.FromString,
                )
        self.BidirectionalStreamingAsyncList = channel.stream_stream(
                '/AiiiGRPC.ToDoService/BidirectionalStreamingAsyncList',
                request_serializer=action__pb2.Item.SerializeToString,
                response_deserializer=action__pb2.List.FromString,
                )


class ToDoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UnaryAddItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClientStreamingAddItem(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerStreamingSubList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BidirectionalStreamingAsyncList(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ToDoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UnaryAddItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UnaryAddItem,
                    request_deserializer=action__pb2.Item.FromString,
                    response_serializer=action__pb2.List.SerializeToString,
            ),
            'ClientStreamingAddItem': grpc.stream_unary_rpc_method_handler(
                    servicer.ClientStreamingAddItem,
                    request_deserializer=action__pb2.Item.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ServerStreamingSubList': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerStreamingSubList,
                    request_deserializer=action__pb2.Filter.FromString,
                    response_serializer=action__pb2.Item.SerializeToString,
            ),
            'BidirectionalStreamingAsyncList': grpc.stream_stream_rpc_method_handler(
                    servicer.BidirectionalStreamingAsyncList,
                    request_deserializer=action__pb2.Item.FromString,
                    response_serializer=action__pb2.List.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AiiiGRPC.ToDoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ToDoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UnaryAddItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AiiiGRPC.ToDoService/UnaryAddItem',
            action__pb2.Item.SerializeToString,
            action__pb2.List.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClientStreamingAddItem(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/AiiiGRPC.ToDoService/ClientStreamingAddItem',
            action__pb2.Item.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerStreamingSubList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AiiiGRPC.ToDoService/ServerStreamingSubList',
            action__pb2.Filter.SerializeToString,
            action__pb2.Item.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BidirectionalStreamingAsyncList(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/AiiiGRPC.ToDoService/BidirectionalStreamingAsyncList',
            action__pb2.Item.SerializeToString,
            action__pb2.List.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
